// 2014-12-12


// Better clock and date format
clock_time_format = "%I:%M %p %A, %B %d, %Y";


// Session auto save and restore
require("session.js");
session_auto_save_auto_load = true;


// Set default download directory to: ~/Downloads
cwd = get_home_directory();
cwd.append("Downloads");


// Set default webjump
read_url_handler_list = [read_url_make_default_webjump_handler("google")];


// Open external URLs and files in active window
url_remoting_fn = load_url_in_new_buffer;


// Buffer order: end oriented
new_buffer_position = buffer_position_end;
new_buffer_with_opener_position = buffer_position_after;
bury_buffer_position = null;


interactive("switch-to-recent-buffer",
	"Prompt for a buffer and switch to it, displaying the list in last-visited order.",
	function (I) {
		switch_to_buffer(
			I.window,
			(yield I.minibuffer.read_buffer(
				$prompt = "Switch to buffer:",
				$buffers = I.window.buffers.buffer_history,
				$default = (I.window.buffers.count > 1 ?
							I.window.buffers.buffer_history[1] :
							I.buffer))));
	});

define_key(default_global_keymap, "C-x b", "switch-to-recent-buffer"); // Temporal
define_key(default_global_keymap, "C-x C-b", "switch-to-buffer"); // Spatial


// Allow moving buffers while in minibuffer
define_key(minibuffer_keymap, "M-P", "buffer-move-backward-minibuffer");
define_key(minibuffer_keymap, "M-N", "buffer-move-forward-minibuffer");

interactive("buffer-move-backward-minibuffer",
	"Move buffer backward and list buffers",
	function (I) {
		// Kill current minibuffer
		minibuffer_abort(I.window);
		buffer_move_forward(I.window, -I.p);
		// List buffers in minibuffer
		switch_to_buffer(
			I.window,
			(yield I.minibuffer.read_buffer(
				$prompt = "Switch to buffer:",
				$default = (I.window.buffers.count > 1 ?
							I.window.buffers.buffer_history[1] :
							I.buffer))));
	});

interactive("buffer-move-forward-minibuffer",
	"Move buffer backward and list buffers",
	function (I) {
		// Kill current minibuffer
		minibuffer_abort(I.window);
		buffer_move_forward(I.window, I.p);
		// List buffers in minibuffer
		switch_to_buffer(
			I.window,
			(yield I.minibuffer.read_buffer(
				$prompt = "Switch to buffer:",
				$default = (I.window.buffers.count > 1 ?
							I.window.buffers.buffer_history[1] :
							I.buffer))));
	});


// Bring up buffer list after moving buffer
define_key(default_global_keymap, "M-P", "buffer-move-backward-list");
define_key(default_global_keymap, "M-N", "buffer-move-forward-list");

interactive("buffer-move-backward-list",
	"Move buffer backward and list buffers",
	function (I) {
		buffer_move_forward(I.window, -I.p);
		// List buffers in minibuffer
		switch_to_buffer(
			I.window,
			(yield I.minibuffer.read_buffer(
				$prompt = "Switch to buffer:",
				$default = (I.window.buffers.count > 1 ?
							I.window.buffers.buffer_history[1] :
							I.buffer))));
	});

interactive("buffer-move-forward-list",
	"Move buffer backward and list buffers",
	function (I) {
		buffer_move_forward(I.window, I.p);
		// List buffers in minibuffer
		switch_to_buffer(
			I.window,
			(yield I.minibuffer.read_buffer(
				$prompt = "Switch to buffer:",
				$default = (I.window.buffers.count > 1 ?
							I.window.buffers.buffer_history[1] :
							I.buffer))));
	});


// Revive Buffer (Undo closed tab)
define_key(default_global_keymap, "C-T", "revive-buffer");
define_key(default_global_keymap, "h", "revive-buffer"); // history

var kill_buffer_original = kill_buffer_original || kill_buffer;
var killed_buffer_urls = [];
var killed_buffer_histories = [];

//  remember_killed_buffer 
kill_buffer = function (buffer, force) {
    var hist = buffer.web_navigation.sessionHistory;
    if (buffer.display_uri_string && hist) {
        killed_buffer_histories.push(hist);
        killed_buffer_urls.push(buffer.display_uri_string);
    }
    kill_buffer_original(buffer,force);
};

interactive("revive-buffer",
    "Loads url from a previously killed buffer",
    function restore_killed_buffer (I) {
        if (killed_buffer_urls.length !== 0) {
            var url = yield I.minibuffer.read(
                $prompt = "Restore killed url:",
                $completer = new all_word_completer($completions = killed_buffer_urls),
                $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                $auto_complete = "url",
                $auto_complete_initial = true,
                $auto_complete_delay = 0,
                $require_match = true);

            var window = I.window;
            var creator = buffer_creator(content_buffer);
            var idx = killed_buffer_urls.indexOf(url);

            // Create the buffer
            var buf = creator(window, null);

            // Recover the history
            buf.web_navigation.sessionHistory = killed_buffer_histories[idx];

            // This line may seem redundant, but it's necessary.
            var original_index = buf.web_navigation.sessionHistory.index;
            buf.web_navigation.gotoIndex(original_index);

            // Focus the new tab
            window.buffers.current = buf;

            // Remove revived from cemitery
            killed_buffer_urls.splice(idx,1);
            killed_buffer_histories.splice(idx,1);
        } else {
            I.window.minibuffer.message("No killed buffer urls");
        }
    });


// Big Hint Numbers
register_user_stylesheet(
    "data:text/css," +
        escape(
            "@namespace url(\"http://www.w3.org/1999/xhtml\");\n" +
            "span.__conkeror_hint {\n"+
            "  font-size: 18px !important;\n"+
            "  line-height: 18px !important;\n"+
            "}"));


// Follow Links in a New Buffer with a One-Key Binding
define_key(content_buffer_normal_keymap, "M-f", "follow-new-buffer-background");


// Make C-c C-c submit form
define_key(content_buffer_normal_keymap, "C-c C-c", "submit-form");


// Make C-x C-p print the current page
define_key(default_global_keymap, "C-x C-p", "print-buffer");
